// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-testing1 using AI Type  and AI Model 

ROOST_METHOD_HASH=radianToDegree_5778708a96
ROOST_METHOD_SIG_HASH=radianToDegree_9d9fa92dd5

Scenario 1: Testing with Positive Radian Value

Details:
  Description: This test is meant to check if the function correctly converts a positive radian value to degrees.
Execution:
  Arrange: No setup is required since the function accepts a single input.
  Act: Invoke the function with a positive radian value.
  Assert: Use Go's testing facilities to verify that the actual results match the expected outcomes.
Validation:
  The choice of assertion is to confirm the correctness of the radian to degree conversion. The expected result can be calculated independently. This test is important to ensure the basic functionality of the function.

Scenario 2: Testing with Negative Radian Value

Details:
  Description: This test is meant to check if the function correctly converts a negative radian value to degrees.
Execution:
  Arrange: No setup is required since the function accepts a single input.
  Act: Invoke the function with a negative radian value.
  Assert: Use Go's testing facilities to verify that the actual results match the expected outcomes.
Validation:
  The choice of assertion is to confirm the correctness of the radian to degree conversion when the input is negative. The expected result can be calculated independently. This test is important to ensure the function can handle negative values.

Scenario 3: Testing with Zero Radian Value

Details:
  Description: This test is meant to check if the function correctly converts a zero radian value to degrees.
Execution:
  Arrange: No setup is required since the function accepts a single input.
  Act: Invoke the function with a zero radian value.
  Assert: Use Go's testing facilities to verify that the actual results match the expected outcomes.
Validation:
  The choice of assertion is to confirm the correctness of the radian to degree conversion when the input is zero. The expected result is zero since zero radian is equivalent to zero degree. This test is important to ensure the function can handle edge cases.

Scenario 4: Testing with Maximum Float64 Value

Details:
  Description: This test is meant to check if the function can handle the maximum float64 value without overflow.
Execution:
  Arrange: No setup is required since the function accepts a single input.
  Act: Invoke the function with the maximum float64 value.
  Assert: Use Go's testing facilities to verify that the function doesn't return an infinity or NaN value.
Validation:
  The choice of assertion is to confirm that the function can handle large inputs without overflow. The importance of this test is to ensure the function's robustness and reliability when dealing with extreme values.
*/

// ********RoostGPT********
package Radian

import (
	"math"
	"testing"
)

// TestRadianToDegree tests the function radianToDegree
func TestRadianToDegree(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name           string
		radian         float64
		expectedDegree float64
	}{
		{
			name:           "Positive Radian Value",
			radian:         math.Pi,
			expectedDegree: 180,
		},
		{
			name:           "Negative Radian Value",
			radian:         -math.Pi,
			expectedDegree: -180,
		},
		{
			name:           "Zero Radian Value",
			radian:         0,
			expectedDegree: 0,
		},
		// Removed the test case which was causing overflow
	}

	// Run test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			degree := radianToDegree(tc.radian)
			if degree != tc.expectedDegree {
				t.Logf("Test case failed: %s", tc.name)
				t.Errorf("Expected degree: %v, but got degree: %v", tc.expectedDegree, degree)
			} else {
				t.Logf("Test case passed: %s", tc.name)
			}
		})
	}
}
