// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-testing1 using AI Type  and AI Model 

ROOST_METHOD_HASH=squareRoot_83c14d64c4
ROOST_METHOD_SIG_HASH=squareRoot_144c0043a6

Scenario 1: Testing squareRoot with a positive number

Details:
  Description: This test checks if the squareRoot function correctly calculates the square root of a positive number.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the squareRoot function with a positive number, say 25.
  Assert: Check if the returned value is 5, which is the square root of 25.
Validation:
  The assertion is chosen to verify the correctness of the squareRoot function. The expected result is based on the mathematical fact that the square root of 25 is 5. This test is important because it checks the basic functionality of the squareRoot function.

Scenario 2: Testing squareRoot with a negative number

Details:
  Description: This test checks if the squareRoot function correctly handles a negative number input.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the squareRoot function with a negative number, say -4.
  Assert: Check if the returned value is -1, which is the return value for invalid inputs.
Validation:
  The assertion is chosen to verify the correctness of the squareRoot function when given a negative number. The expected result is based on the function specification that it should return -1 for invalid inputs. This test is important because it checks the error handling of the squareRoot function.

Scenario 3: Testing squareRoot with zero

Details:
  Description: This test checks if the squareRoot function correctly handles zero as an input.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the squareRoot function with 0.
  Assert: Check if the returned value is 0, which is the square root of 0.
Validation:
  The assertion is chosen to verify the correctness of the squareRoot function when given zero as an input. The expected result is based on the mathematical fact that the square root of 0 is 0. This test is important because it checks the edge case of squareRoot function.

Scenario 4: Testing squareRoot with a large positive number

Details:
  Description: This test checks if the squareRoot function correctly calculates the square root of a large positive number.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the squareRoot function with a large positive number, say 1e6.
  Assert: Check if the returned value is 1000, which is the square root of 1e6.
Validation:
  The assertion is chosen to verify the correctness of the squareRoot function when given a large positive number. The expected result is based on the mathematical fact that the square root of 1e6 is 1000. This test is important because it checks the performance of the squareRoot function with large numbers.
*/

// ********RoostGPT********
package SquareRoot

import (
	"math"
	"testing"
)

func TestSquareRoot(t *testing.T) {
	var tests = []struct {
		input    float64
		expected float64
	}{
		{25, 5},
		{-4, -1},
		{0, 0},
		{1e6, 1000},
	}

	for _, test := range tests {
		if output := squareRoot(test.input); math.Abs(output-test.expected) > 1e-6 {
			t.Error("Test Failed: {} inputted, {} expected, recieved: {}", test.input, test.expected, output)
		} else {
			t.Log("Test Passed: {} inputted, {} expected, recieved: {}", test.input, test.expected, output)
		}
	}
}
