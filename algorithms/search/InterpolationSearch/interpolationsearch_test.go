// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-file-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=interpolationSearch_d0bdb80f3c
ROOST_METHOD_SIG_HASH=interpolationSearch_23d9bb25dd

Scenario 1: Normal Operation with Query in Array

Details:
  Description: This test is meant to check the normal operation of the function when the query is present in the array. The function should return the index of the query in the sorted array.
Execution:
  Arrange: Create a sorted array and a query that is present in the array.
  Act: Invoke the interpolationSearch function with the created array and query.
  Assert: Use Go's testing facilities to verify that the returned index matches the expected index.
Validation:
  The assertion is checking that the function correctly finds the index of the query in the array. This is important as the function's primary purpose is to find the index of a query in a sorted array.

Scenario 2: Normal Operation with Query not in Array

Details:
  Description: This test is meant to check the function's operation when the query is not present in the array. The function should return -1 indicating that the query is not present.
Execution:
  Arrange: Create a sorted array and a query that is not present in the array.
  Act: Invoke the interpolationSearch function with the created array and query.
  Assert: Use Go's testing facilities to verify that the function returns -1.
Validation:
  The assertion is checking that the function correctly identifies when a query is not present in the array. This is important as it allows the function to provide feedback on the absence of a query in the array.

Scenario 3: Edge Case with Empty Array

Details:
  Description: This test is meant to check the function's operation when provided with an empty array. The function should return -1 as there are no elements in the array.
Execution:
  Arrange: Create an empty array and a query.
  Act: Invoke the interpolationSearch function with the created array and query.
  Assert: Use Go's testing facilities to verify that the function returns -1.
Validation:
  The assertion is checking that the function correctly handles an empty array. This is important as it ensures the function can handle edge cases and does not crash or behave unexpectedly when provided with an empty array.

Scenario 4: Edge Case with Single Element Array

Details:
  Description: This test is meant to check the function's operation when provided with a single element array. The function should return the index of the query if it matches the single element, or -1 if it does not.
Execution:
  Arrange: Create a single element array and a query.
  Act: Invoke the interpolationSearch function with the created array and query.
  Assert: Use Go's testing facilities to verify that the function returns the expected index or -1.
Validation:
  The assertion is checking that the function correctly handles a single element array. This is important as it ensures the function can handle edge cases and does not crash or behave unexpectedly when provided with a single element array.
*/

// ********RoostGPT********
package InterpolationSearch

import (
	"testing"
)

func Testinterpolationsearch(t *testing.T) {
	// Test cases
	testCases := []struct {
		name   string
		arr    []int
		query  int
		result int
	}{
		{
			name:   "Normal Operation with Query in Array",
			arr:    []int{1, 3, 5, 7, 9},
			query:  5,
			result: 2,
		},
		{
			name:   "Normal Operation with Query not in Array",
			arr:    []int{1, 3, 5, 7, 9},
			query:  6,
			result: -1,
		},
		{
			name:   "Edge Case with Empty Array",
			arr:    []int{},
			query:  5,
			result: -1,
		},
		{
			name:   "Edge Case with Single Element Array",
			arr:    []int{5},
			query:  5,
			result: 0,
		},
		{
			name:   "Edge Case with Single Element Array and Query not present",
			arr:    []int{5},
			query:  7,
			result: -1,
		},
	}

	// Run test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := interpolationSearch(tc.arr, tc.query)
			if got != tc.result {
				t.Errorf("for array %v and query %d, expected %d, but got %d", tc.arr, tc.query, tc.result, got)
			}
		})
	}
}
