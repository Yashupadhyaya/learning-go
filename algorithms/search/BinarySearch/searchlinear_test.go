// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-file-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=SearchLinear_a461b39a3a
ROOST_METHOD_SIG_HASH=SearchLinear_35e85ee873

Scenario 1: Positive Test Case - Query Item Present in Array

Details:
  Description: This test is meant to check the normal operation of the SearchLinear function when the query item is present in the array. It is expected to return the index of the query item in the array.
Execution:
  Arrange: Create an array with a known set of integers and a query integer that is present in the array.
  Act: Invoke the SearchLinear function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the returned index matches the expected index of the query item in the array.
Validation:
  The assertion checks that the function correctly identifies the index of the query item in the array. This test is important to validate the basic functionality of the SearchLinear function.

Scenario 2: Negative Test Case - Query Item Not Present in Array

Details:
  Description: This test is meant to check the operation of the SearchLinear function when the query item is not present in the array. In this case, the function should return -1.
Execution:
  Arrange: Create an array with a known set of integers and a query integer that is not present in the array.
  Act: Invoke the SearchLinear function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the returned value is -1.
Validation:
  The assertion checks that the function correctly returns -1 when the query item is not found in the array. This test is important as it verifies the behavior of the function in situations where the query item is not present.

Scenario 3: Edge Case - Empty Array

Details:
  Description: This test is meant to check the behavior of the SearchLinear function when it is provided an empty array. The function should return -1 irrespective of the query item.
Execution:
  Arrange: Create an empty array and a query integer.
  Act: Invoke the SearchLinear function with the empty array and query.
  Assert: Use Go's testing facilities to verify that the returned value is -1.
Validation:
  The assertion checks that the function correctly returns -1 when it is provided an empty array. This test is important as it verifies the behavior of the function in edge cases and ensures it handles them gracefully.

Scenario 4: Edge Case - Array with Duplicate Items

Details:
  Description: This test is meant to check the behavior of the SearchLinear function when the array contains duplicate items. The function should return the index of the first occurrence of the query item.
Execution:
  Arrange: Create an array with duplicate integers and a query integer that is duplicated in the array.
  Act: Invoke the SearchLinear function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the returned index matches the index of the first occurrence of the query item in the array.
Validation:
  The assertion checks that the function correctly identifies the index of the first occurrence of the query item in the array. This test is crucial to ensure that the function handles arrays with duplicate items correctly.
*/

// ********RoostGPT********
package BinarySearch

import (
	"testing"
)

// TestSearchLinear tests the SearchLinear function
func TestSearchLinear(t *testing.T) {
	// Define test cases
	tests := []struct {
		name   string
		arr    []int
		query  int
		expect int
	}{
		{
			name:   "Positive Test Case - Query Item Present in Array",
			arr:    []int{1, 2, 3, 4, 5},
			query:  3,
			expect: 2,
		},
		{
			name:   "Negative Test Case - Query Item Not Present in Array",
			arr:    []int{1, 2, 3, 4, 5},
			query:  10,
			expect: -1,
		},
		{
			name:   "Edge Case - Empty Array",
			arr:    []int{},
			query:  1,
			expect: -1,
		},
		{
			name:   "Edge Case - Array with Duplicate Items",
			arr:    []int{1, 2, 3, 3, 5},
			query:  3,
			expect: 2,
		},
	}

	// Run test cases
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			got := SearchLinear(test.arr, test.query)
			if got != test.expect {
				t.Errorf("SearchLinear(%v, %v) = %v; want %v", test.arr, test.query, got, test.expect)
			}
		})
	}
}
