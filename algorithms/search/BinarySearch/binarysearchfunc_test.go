// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-file-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=binarySearchFunc_496c58f208
ROOST_METHOD_SIG_HASH=binarySearchFunc_ef1599d8c7

Scenario 1: Successful binary search with query present in the array

Details:
  Description: This test is meant to check the normal operation of the binarySearchFunc when the query is present in the array. The array is sorted, and the query is an integer that exists within the array.
Execution:
  Arrange: Create a sorted array of integers and a query that is present in the array.
  Act: Invoke the binarySearchFunc with the array and the query as parameters.
  Assert: Use Go's testing facilities to verify that the returned index matches the expected index of the query in the array.
Validation:
  The choice of assertion is based on the expected behavior of the binarySearchFunc when the query is present in the array. This test is important to validate that the function can successfully locate and return the correct index of a query within a sorted array.

Scenario 2: Binary search with query not present in the array

Details:
  Description: This test is meant to check the operation of the binarySearchFunc when the query is not present in the array. The array is sorted, and the query is an integer that does not exist within the array.
Execution:
  Arrange: Create a sorted array of integers and a query that is not present in the array.
  Act: Invoke the binarySearchFunc with the array and the query as parameters.
  Assert: Use Go's testing facilities to verify that the returned index is -1, indicating that the query is not present in the array.
Validation:
  The choice of assertion is based on the expected behavior of the binarySearchFunc when the query is not present in the array. This test is important to validate that the function correctly returns -1 when the query is not found.

Scenario 3: Binary search with an empty array

Details:
  Description: This test is meant to check the operation of the binarySearchFunc when the array is empty. The array contains no elements, and the query is any integer.
Execution:
  Arrange: Create an empty array and any integer as a query.
  Act: Invoke the binarySearchFunc with the empty array and the query as parameters.
  Assert: Use Go's testing facilities to verify that the returned index is -1, indicating that the query is not present in the array.
Validation:
  The choice of assertion is based on the expected behavior of the binarySearchFunc when the array is empty. This test is important to validate that the function correctly returns -1 when the array is empty, regardless of the query.

Scenario 4: Binary search with a single-element array

Details:
  Description: This test is meant to check the operation of the binarySearchFunc when the array contains only one element. The array contains a single integer, and the query is either that integer or any other integer.
Execution:
  Arrange: Create a single-element array and a query that is either equal to or different from the array's element.
  Act: Invoke the binarySearchFunc with the single-element array and the query as parameters.
  Assert: Use Go's testing facilities to verify that the returned index matches the expected result.
Validation:
  The choice of assertion is based on the expected behavior of the binarySearchFunc when the array contains a single element. This test is important to validate that the function can handle arrays of any size, including those with only one element.
*/

// ********RoostGPT********
package BinarySearch

import (
	"testing"
)

// Testbinarysearchfunc is a test function for binarySearchFunc
func Testbinarysearchfunc(t *testing.T) {
	testCases := []struct {
		name     string
		arr      []int
		query    int
		expected int
	}{
		{
			name:     "Successful binary search with query present in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    6,
			expected: 5,
		},
		{
			name:     "Binary search with query not present in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    11,
			expected: -1,
		},
		{
			name:     "Binary search with an empty array",
			arr:      []int{},
			query:    1,
			expected: -1,
		},
		{
			name:     "Binary search with a single-element array, query matches the element",
			arr:      []int{1},
			query:    1,
			expected: 0,
		},
		{
			name:     "Binary search with a single-element array, query does not match the element",
			arr:      []int{1},
			query:    2,
			expected: -1,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := binarySearchFunc(tc.arr, tc.query)
			if result != tc.expected {
				t.Errorf("binarySearchFunc(%v, %v): expected %v, got %v", tc.arr, tc.query, tc.expected, result)
			}
		})
	}
}
