// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-file-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=linearSearch_076b2ca8c0
ROOST_METHOD_SIG_HASH=linearSearch_12fac2e721

Scenario 1: Positive Test Case - Query Item Present in Array

Details:
  Description: This test is meant to check the normal operation of the linearSearch function when the query item is present in the array. It is expected to return the index of the query item in the array.
Execution:
  Arrange: Create an array with a known set of integers and a query integer that is present in the array.
  Act: Invoke the linearSearch function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the returned index matches the expected index of the query item in the array.
Validation:
  The assertion checks that the function correctly identifies the index of the query item in the array. This test is important as it verifies the basic functionality of the linearSearch function.

Scenario 2: Negative Test Case - Query Item Not Present in Array

Details:
  Description: This test is meant to check the function's behavior when the query item is not present in the array. It is expected to return -1.
Execution:
  Arrange: Create an array with a known set of integers and a query integer that is not present in the array.
  Act: Invoke the linearSearch function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the function returns -1.
Validation:
  The assertion checks that the function correctly returns -1 when the query item is not found in the array. This test is important because it verifies the function's behavior in a case where a search fails.

Scenario 3: Edge Case - Empty Array

Details:
  Description: This test is meant to check the function's behavior when the provided array is empty. It is expected to return -1 regardless of the query.
Execution:
  Arrange: Create an empty array and any query integer.
  Act: Invoke the linearSearch function with the empty array and query.
  Assert: Use Go's testing facilities to verify that the function returns -1.
Validation:
  The assertion checks that the function correctly returns -1 when the array is empty. This test is important as it verifies the function's behavior in an edge case.

Scenario 4: Edge Case - Query Item Present Multiple Times in Array

Details:
  Description: This test is meant to check the function's behavior when the query item is present multiple times in the array. It is expected to return the index of the first occurrence of the query item.
Execution:
  Arrange: Create an array with a known set of integers where a specific integer is present multiple times, and that integer as the query.
  Act: Invoke the linearSearch function with the prepared array and query.
  Assert: Use Go's testing facilities to verify that the returned index matches the index of the first occurrence of the query item in the array.
Validation:
  The assertion checks that the function correctly identifies the first occurrence of the query item in the array. This test is important as it verifies the function's behavior when the query item is present multiple times in the array.
*/

// ********RoostGPT********
package LinearSearch

import (
	"testing"
)

func Testlinearsearch(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name     string
		arr      []int
		query    int
		expected int
	}{
		{
			name:     "Positive Test Case - Query Item Present in Array",
			arr:      []int{1, 2, 3, 4, 5, 6},
			query:    4,
			expected: 3,
		},
		{
			name:     "Negative Test Case - Query Item Not Present in Array",
			arr:      []int{1, 2, 3, 4, 5, 6},
			query:    7,
			expected: -1,
		},
		{
			name:     "Edge Case - Empty Array",
			arr:      []int{},
			query:    1,
			expected: -1,
		},
		{
			name:     "Edge Case - Query Item Present Multiple Times in Array",
			arr:      []int{1, 2, 3, 4, 4, 4, 5, 6},
			query:    4,
			expected: 3,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Act
			result := linearSearch(tc.arr, tc.query)

			// Assert
			if result != tc.expected {
				t.Errorf("linearSearch(%v, %v) = %v; want %v", tc.arr, tc.query, result, tc.expected)
			}
		})
	}
}
