// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-file-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=SearchLinerFunc_d1480062f6
ROOST_METHOD_SIG_HASH=SearchLinerFunc_1e369ea8a6

Scenario 1: Search for an existing number in the array

Details:
  Description: This test checks if the function correctly returns the index of the searched number that exists in the array.
Execution:
  Arrange: Create an array of integers and a query integer that exists in the array.
  Act: Call the SearchLinerFunc with the created array and query integer.
  Assert: Check if the returned index matches the expected index of the query integer in the array.
Validation:
  The test asserts that the function correctly returns the index of the existing integer in the array. This test is important to ensure that the function is working as expected under normal conditions.

Scenario 2: Search for a non-existing number in the array

Details:
  Description: This test checks if the function correctly returns -1 when the searched number does not exist in the array.
Execution:
  Arrange: Create an array of integers and a query integer that does not exist in the array.
  Act: Call the SearchLinerFunc with the created array and query integer.
  Assert: Check if the returned index is -1.
Validation:
  The test asserts that the function correctly returns -1 when the searched integer does not exist in the array. This test is important to ensure that the function is working as expected when the searched integer does not exist in the array.

Scenario 3: Search in an empty array

Details:
  Description: This test checks if the function correctly returns -1 when the array is empty.
Execution:
  Arrange: Create an empty array and any query integer.
  Act: Call the SearchLinerFunc with the created array and query integer.
  Assert: Check if the returned index is -1.
Validation:
  The test asserts that the function correctly returns -1 when the array is empty. This test is important to ensure that the function is working as expected when the array is empty.

Scenario 4: Search for the first number in the array

Details:
  Description: This test checks if the function correctly returns 0 when the searched number is the first number in the array.
Execution:
  Arrange: Create an array of integers and a query integer that is the first number in the array.
  Act: Call the SearchLinerFunc with the created array and query integer.
  Assert: Check if the returned index is 0.
Validation:
  The test asserts that the function correctly returns 0 when the searched integer is the first number in the array. This test is important to ensure that the function is working as expected when the searched integer is the first number in the array.

Scenario 5: Search for the last number in the array

Details:
  Description: This test checks if the function correctly returns the index of the last number when the searched number is the last number in the array.
Execution:
  Arrange: Create an array of integers and a query integer that is the last number in the array.
  Act: Call the SearchLinerFunc with the created array and query integer.
  Assert: Check if the returned index matches the index of the last number in the array.
Validation:
  The test asserts that the function correctly returns the index of the last number when the searched integer is the last number in the array. This test is important to ensure that the function is working as expected when the searched integer is the last number in the array.
*/

// ********RoostGPT********
package main

import (
	"testing"
)

func SearchLinerFunc(arr []int, query int) int {
	for i, val := range arr {
		if val == query {
			return i
		}
	}
	return -1
}

func TestSearchLinerFunc(t *testing.T) {
	testCases := []struct {
		name     string
		arr      []int
		query    int
		expected int
	}{
		{
			name:     "Search for an existing number in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    7,
			expected: 6,
		},
		{
			name:     "Search for a non-existing number in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    11,
			expected: -1,
		},
		{
			name:     "Search in an empty array",
			arr:      []int{},
			query:    0,
			expected: -1,
		},
		{
			name:     "Search for the first number in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    1,
			expected: 0,
		},
		{
			name:     "Search for the last number in the array",
			arr:      []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			query:    10,
			expected: 9,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := SearchLinerFunc(tc.arr, tc.query)

			if result != tc.expected {
				t.Errorf("failed %s: got %v, expected %v", tc.name, result, tc.expected)
			} else {
				t.Logf("success %s", tc.name)
			}
		})
	}
}
